    diff -rupN comm-esr31/mozilla/js/src/builtin/TypedObject.cpp comm-esr31-new/mozilla/js/src/builtin/TypedObject.cpp
    --- comm-esr31/mozilla/js/src/builtin/TypedObject.cpp   2015-05-07 20:53:49.000000000 +0200
    +++ comm-esr31-new/mozilla/js/src/builtin/TypedObject.cpp       2015-05-21 11:46:13.792908971 +0200
    @@ -710,12 +710,12 @@ ArrayMetaTypeDescr::construct(JSContext*
         contents.append(")");
         RootedAtom stringRepr(cx, contents.finishAtom());
         if (!stringRepr)
    -        return nullptr;
    +        return false;
     
         // Extract ArrayType.prototype
         RootedObject arrayTypePrototype(cx, GetPrototype(cx, arrayTypeGlobal));
         if (!arrayTypePrototype)
    -        return nullptr;
    +        return false;
     
         // Create the instance of ArrayType
         Rooted<UnsizedArrayTypeDescr*> obj(cx);
    @@ -728,7 +728,7 @@ ArrayMetaTypeDescr::construct(JSContext*
         if (!JSObject::defineProperty(cx, obj, cx->names().length,
                                       UndefinedHandleValue, nullptr, nullptr,
                                       JSPROP_READONLY | JSPROP_PERMANENT))
    -        return nullptr;
    +        return false;
     
         args.rval().setObject(*obj);
         return true;
    @@ -762,7 +762,7 @@ UnsizedArrayTypeDescr::dimension(JSConte
         if (!size.isValid()) {
             JS_ReportErrorNumber(cx, js_GetErrorMessage, nullptr,
                                  JSMSG_TYPEDOBJECT_TOO_BIG);
    -        return nullptr;
    +        return false;
         }
     
         // Construct a canonical string `new ArrayType(<elementType>).dimension(N)`:
    @@ -775,7 +775,7 @@ UnsizedArrayTypeDescr::dimension(JSConte
         contents.append(")");
         RootedAtom stringRepr(cx, contents.finishAtom());
         if (!stringRepr)
    -        return nullptr;
    +        return false;
     
         // Create the sized type object.
         Rooted<SizedArrayTypeDescr*> obj(cx);
    @@ -793,7 +793,7 @@ UnsizedArrayTypeDescr::dimension(JSConte
         if (!JSObject::defineProperty(cx, obj, cx->names().length,
                                       lengthVal, nullptr, nullptr,
                                       JSPROP_READONLY | JSPROP_PERMANENT))
    -        return nullptr;
    +        return false;
     
         // Add `unsized` property, which is a link from the sized
         // array to the unsized array.
    @@ -801,7 +801,7 @@ UnsizedArrayTypeDescr::dimension(JSConte
         if (!JSObject::defineProperty(cx, obj, cx->names().unsized,
                                       unsizedTypeDescrValue, nullptr, nullptr,
                                       JSPROP_READONLY | JSPROP_PERMANENT))
    -        return nullptr;
    +        return false;
     
         args.rval().setObject(*obj);
         return true;
    @@ -1253,7 +1253,7 @@ DefineSimpleTypeDescr(JSContext* cx,
         Rooted<TypedProto*> proto(cx);
         proto = NewObjectWithProto<TypedProto>(cx, objProto, nullptr, TenuredObject);
         if (!proto)
    -        return nullptr;
    +        return false;
         proto->initTypeDescrSlot(*descr);
         descr->initReservedSlot(JS_DESCR_SLOT_TYPROTO, ObjectValue(*proto));
     
    @@ -1358,14 +1358,14 @@ GlobalObject::initTypedObjectModule(JSCo
     #define BINARYDATA_SCALAR_DEFINE(constant_, type_, name_)                       \
         if (!DefineSimpleTypeDescr<ScalarTypeDescr>(cx, global, module, constant_,      \
                                                 cx->names().name_))                 \
    -        return nullptr;
    +        return false;
         JS_FOR_EACH_SCALAR_TYPE_REPR(BINARYDATA_SCALAR_DEFINE)
     #undef BINARYDATA_SCALAR_DEFINE
     
     #define BINARYDATA_REFERENCE_DEFINE(constant_, type_, name_)                    \
         if (!DefineSimpleTypeDescr<ReferenceTypeDescr>(cx, global, module, constant_,   \
                                                    cx->names().name_))              \
    -        return nullptr;
    +        return false;
         JS_FOR_EACH_REFERENCE_TYPE_REPR(BINARYDATA_REFERENCE_DEFINE)
     #undef BINARYDATA_REFERENCE_DEFINE
     
    @@ -1375,14 +1375,14 @@ GlobalObject::initTypedObjectModule(JSCo
         arrayType = DefineMetaTypeDescr<ArrayMetaTypeDescr>(
             cx, global, module, TypedObjectModuleObject::ArrayTypePrototype);
         if (!arrayType)
    -        return nullptr;
    +        return false;
     
         RootedValue arrayTypeValue(cx, ObjectValue(*arrayType));
         if (!JSObject::defineProperty(cx, module, cx->names().ArrayType,
                                       arrayTypeValue,
                                       nullptr, nullptr,
                                       JSPROP_READONLY | JSPROP_PERMANENT))
    -        return nullptr;
    +        return false;
     
         // StructType.
     
    @@ -1390,14 +1390,14 @@ GlobalObject::initTypedObjectModule(JSCo
         structType = DefineMetaTypeDescr<StructMetaTypeDescr>(
             cx, global, module, TypedObjectModuleObject::StructTypePrototype);
         if (!structType)
    -        return nullptr;
    +        return false;
     
         RootedValue structTypeValue(cx, ObjectValue(*structType));
         if (!JSObject::defineProperty(cx, module, cx->names().StructType,
                                       structTypeValue,
                                       nullptr, nullptr,
                                       JSPROP_READONLY | JSPROP_PERMANENT))
    -        return nullptr;
    +        return false;
     
         // Everything is setup, install module on the global object:
         RootedValue moduleValue(cx, ObjectValue(*module));
    @@ -1407,7 +1407,7 @@ GlobalObject::initTypedObjectModule(JSCo
                                       nullptr, nullptr,
                                       0))
         {
    -        return nullptr;
    +        return false;
         }
     
         return module;
    @@ -2466,7 +2466,7 @@ TypedObject::constructUnsized(JSContext*
             if (length < 0) {
                 JS_ReportErrorNumber(cx, js_GetErrorMessage,
                                      nullptr, JSMSG_TYPEDOBJECT_BAD_ARGS);
    -            return nullptr;
    +            return false;
             }
             Rooted<TypedObject*> obj(cx, createZeroed(cx, callee, length));
             if (!obj)
    diff -rupN comm-esr31/mozilla/js/src/frontend/BytecodeCompiler.cpp comm-esr31-new/mozilla/js/src/frontend/BytecodeCompiler.cpp
    --- comm-esr31/mozilla/js/src/frontend/BytecodeCompiler.cpp     2015-05-07 20:53:49.000000000 +0200
    +++ comm-esr31-new/mozilla/js/src/frontend/BytecodeCompiler.cpp 2015-05-21 11:24:25.438455753 +0200
    @@ -544,7 +544,7 @@ CompileFunctionBody(JSContext* cx, Mutab
     
         RootedScriptSource sourceObject(cx, CreateScriptSourceObject(cx, options));
         if (!sourceObject)
    -        return nullptr;
    +        return false;
         ScriptSource* ss = sourceObject->source();
     
         SourceCompressionTask sct(cx);
    diff -rupN comm-esr31/mozilla/js/xpconnect/wrappers/XrayWrapper.cpp comm-esr31-new/mozilla/js/xpconnect/wrappers/XrayWrapper.cpp
    --- comm-esr31/mozilla/js/xpconnect/wrappers/XrayWrapper.cpp    2015-05-07 20:53:42.000000000 +0200
    +++ comm-esr31-new/mozilla/js/xpconnect/wrappers/XrayWrapper.cpp        2015-05-21 13:11:35.888941574 +0200
    @@ -351,7 +351,7 @@ public:
             {
                 JSAutoCompartment ac(cx, target);
                 if (!JS_GetClassPrototype(cx, key, protop))
    -                return nullptr;
    +                return false;
             }
             return JS_WrapObject(cx, protop);
         }
    diff -rupN comm-esr31/mozilla/netwerk/ipc/NeckoParent.cpp comm-esr31-new/mozilla/netwerk/ipc/NeckoParent.cpp
    --- comm-esr31/mozilla/netwerk/ipc/NeckoParent.cpp      2015-05-07 20:53:46.000000000 +0200
    +++ comm-esr31-new/mozilla/netwerk/ipc/NeckoParent.cpp  2015-05-21 12:52:02.906152377 +0200
    @@ -359,7 +359,7 @@ NeckoParent::RecvPRtspChannelConstructor
       RtspChannelParent* p = static_cast<RtspChannelParent*>(aActor);
       return p->Init(aConnectArgs);
     #else
    -  return nullptr;
    +  return false;
     #endif
     }
     
    diff -rupN comm-esr31/patch.txt comm-esr31-new/patch.txt
    --- comm-esr31/patch.txt        1970-01-01 01:00:00.000000000 +0100
    +++ comm-esr31-new/patch.txt    2015-05-21 07:39:22.640807653 +0200
    @@ -0,0 +1,178 @@
    +    diff -rupN mozilla-esr31/js/src/builtin/TypedObject.cpp mozilla-esr31-fix/js/src/builtin/TypedObject.cpp
    +    --- mozilla-esr31/js/src/builtin/TypedObject.cpp        2015-05-05 02:53:52.000000000 +0000
    +    +++ mozilla-esr31-fix/js/src/builtin/TypedObject.cpp    2015-05-20 20:50:59.452767091 +0000
    +    @@ -710,12 +710,12 @@ ArrayMetaTypeDescr::construct(JSContext*
    +         contents.append(")");
    +         RootedAtom stringRepr(cx, contents.finishAtom());
    +         if (!stringRepr)
    +    -        return nullptr;
    +    +        return false;
    +     
    +         // Extract ArrayType.prototype
    +         RootedObject arrayTypePrototype(cx, GetPrototype(cx, arrayTypeGlobal));
    +         if (!arrayTypePrototype)
    +    -        return nullptr;
    +    +        return false;
    +     
    +         // Create the instance of ArrayType
    +         Rooted<UnsizedArrayTypeDescr*> obj(cx);
    +    @@ -728,7 +728,7 @@ ArrayMetaTypeDescr::construct(JSContext*
    +         if (!JSObject::defineProperty(cx, obj, cx->names().length,
    +                                       UndefinedHandleValue, nullptr, nullptr,
    +                                       JSPROP_READONLY | JSPROP_PERMANENT))
    +    -        return nullptr;
    +    +        return false;
    +     
    +         args.rval().setObject(*obj);
    +         return true;
    +    @@ -762,7 +762,7 @@ UnsizedArrayTypeDescr::dimension(JSConte
    +         if (!size.isValid()) {
    +             JS_ReportErrorNumber(cx, js_GetErrorMessage, nullptr,
    +                                  JSMSG_TYPEDOBJECT_TOO_BIG);
    +    -        return nullptr;
    +    +        return false;
    +         }
    +     
    +         // Construct a canonical string `new ArrayType(<elementType>).dimension(N)`:
    +    @@ -775,7 +775,7 @@ UnsizedArrayTypeDescr::dimension(JSConte
    +         contents.append(")");
    +         RootedAtom stringRepr(cx, contents.finishAtom());
    +         if (!stringRepr)
    +    -        return nullptr;
    +    +        return false;
    +     
    +         // Create the sized type object.
    +         Rooted<SizedArrayTypeDescr*> obj(cx);
    +    @@ -793,7 +793,7 @@ UnsizedArrayTypeDescr::dimension(JSConte
    +         if (!JSObject::defineProperty(cx, obj, cx->names().length,
    +                                       lengthVal, nullptr, nullptr,
    +                                       JSPROP_READONLY | JSPROP_PERMANENT))
    +    -        return nullptr;
    +    +        return false;
    +     
    +         // Add `unsized` property, which is a link from the sized
    +         // array to the unsized array.
    +    @@ -801,7 +801,7 @@ UnsizedArrayTypeDescr::dimension(JSConte
    +         if (!JSObject::defineProperty(cx, obj, cx->names().unsized,
    +                                       unsizedTypeDescrValue, nullptr, nullptr,
    +                                       JSPROP_READONLY | JSPROP_PERMANENT))
    +    -        return nullptr;
    +    +        return false;
    +     
    +         args.rval().setObject(*obj);
    +         return true;
    +    @@ -1253,7 +1253,7 @@ DefineSimpleTypeDescr(JSContext* cx,
    +         Rooted<TypedProto*> proto(cx);
    +         proto = NewObjectWithProto<TypedProto>(cx, objProto, nullptr, TenuredObject);
    +         if (!proto)
    +    -        return nullptr;
    +    +        return false;
    +         proto->initTypeDescrSlot(*descr);
    +         descr->initReservedSlot(JS_DESCR_SLOT_TYPROTO, ObjectValue(*proto));
    +     
    +    @@ -1358,14 +1358,14 @@ GlobalObject::initTypedObjectModule(JSCo
    +     #define BINARYDATA_SCALAR_DEFINE(constant_, type_, name_)                       \
    +         if (!DefineSimpleTypeDescr<ScalarTypeDescr>(cx, global, module, constant_,      \
    +                                                 cx->names().name_))                 \
    +    -        return nullptr;
    +    +        return false;
    +         JS_FOR_EACH_SCALAR_TYPE_REPR(BINARYDATA_SCALAR_DEFINE)
    +     #undef BINARYDATA_SCALAR_DEFINE
    +     
    +     #define BINARYDATA_REFERENCE_DEFINE(constant_, type_, name_)                    \
    +         if (!DefineSimpleTypeDescr<ReferenceTypeDescr>(cx, global, module, constant_,   \
    +                                                    cx->names().name_))              \
    +    -        return nullptr;
    +    +        return false;
    +         JS_FOR_EACH_REFERENCE_TYPE_REPR(BINARYDATA_REFERENCE_DEFINE)
    +     #undef BINARYDATA_REFERENCE_DEFINE
    +     
    +    @@ -1375,14 +1375,14 @@ GlobalObject::initTypedObjectModule(JSCo
    +         arrayType = DefineMetaTypeDescr<ArrayMetaTypeDescr>(
    +             cx, global, module, TypedObjectModuleObject::ArrayTypePrototype);
    +         if (!arrayType)
    +    -        return nullptr;
    +    +        return false;
    +     
    +         RootedValue arrayTypeValue(cx, ObjectValue(*arrayType));
    +         if (!JSObject::defineProperty(cx, module, cx->names().ArrayType,
    +                                       arrayTypeValue,
    +                                       nullptr, nullptr,
    +                                       JSPROP_READONLY | JSPROP_PERMANENT))
    +    -        return nullptr;
    +    +        return false;
    +     
    +         // StructType.
    +     
    +    @@ -1390,14 +1390,14 @@ GlobalObject::initTypedObjectModule(JSCo
    +         structType = DefineMetaTypeDescr<StructMetaTypeDescr>(
    +             cx, global, module, TypedObjectModuleObject::StructTypePrototype);
    +         if (!structType)
    +    -        return nullptr;
    +    +        return false;
    +     
    +         RootedValue structTypeValue(cx, ObjectValue(*structType));
    +         if (!JSObject::defineProperty(cx, module, cx->names().StructType,
    +                                       structTypeValue,
    +                                       nullptr, nullptr,
    +                                       JSPROP_READONLY | JSPROP_PERMANENT))
    +    -        return nullptr;
    +    +        return false;
    +     
    +         // Everything is setup, install module on the global object:
    +         RootedValue moduleValue(cx, ObjectValue(*module));
    +    @@ -1407,7 +1407,7 @@ GlobalObject::initTypedObjectModule(JSCo
    +                                       nullptr, nullptr,
    +                                       0))
    +         {
    +    -        return nullptr;
    +    +        return false;
    +         }
    +     
    +         return module;
    +    @@ -2466,7 +2466,7 @@ TypedObject::constructUnsized(JSContext*
    +             if (length < 0) {
    +                 JS_ReportErrorNumber(cx, js_GetErrorMessage,
    +                                      nullptr, JSMSG_TYPEDOBJECT_BAD_ARGS);
    +    -            return nullptr;
    +    +            return false;
    +             }
    +             Rooted<TypedObject*> obj(cx, createZeroed(cx, callee, length));
    +             if (!obj)
    +    diff -rupN mozilla-esr31/js/src/frontend/BytecodeCompiler.cpp mozilla-esr31-fix/js/src/frontend/BytecodeCompiler.cpp
    +    --- mozilla-esr31/js/src/frontend/BytecodeCompiler.cpp  2015-05-05 02:53:52.000000000 +0000
    +    +++ mozilla-esr31-fix/js/src/frontend/BytecodeCompiler.cpp      2015-05-20 20:51:29.384050644 +0000
    +    @@ -544,7 +544,7 @@ CompileFunctionBody(JSContext* cx, Mutab
    +     
    +         RootedScriptSource sourceObject(cx, CreateScriptSourceObject(cx, options));
    +         if (!sourceObject)
    +    -        return nullptr;
    +    +        return false;
    +         ScriptSource* ss = sourceObject->source();
    +     
    +         SourceCompressionTask sct(cx);
    +    diff -rupN ipc/NeckoParent.cpp ipc-new/NeckoParent.cpp
    +    --- mozilla-esr31/netwerk/ipc/NeckoParent.cpp   2015-05-05 02:53:48.000000000 +0000
    +    +++ mozilla-esr31-fix/netwerk/ipc/NeckoParent.cpp       2015-05-20 21:29:36.310086521 +0000
    +    @@ -359,7 +359,7 @@ NeckoParent::RecvPRtspChannelConstructor
    +       RtspChannelParent* p = static_cast<RtspChannelParent*>(aActor);
    +       return p->Init(aConnectArgs);
    +     #else
    +    -  return nullptr;
    +    +  return false;
    +     #endif
    +     }
    +     
    +    diff -rupN xpconnect/wrappers/XrayWrapper.cpp xpconnect-new/wrappers/XrayWrapper.cpp
    +    --- mozilla-esr31/js/xpconnect/wrappers/XrayWrapper.cpp 2015-05-05 02:53:44.000000000 +0000
    +    +++ mozilla-esr31-fix/js/xpconnect/wrappers/XrayWrapper.cpp     2015-05-20 21:43:07.555022488 +0000
    +    @@ -351,7 +351,7 @@ public:
    +             {
    +                 JSAutoCompartment ac(cx, target);
    +                 if (!JS_GetClassPrototype(cx, key, protop))
    +    -                return nullptr;
    +    +                return false;
    +             }
    +             return JS_WrapObject(cx, protop);
    +         }
    +
